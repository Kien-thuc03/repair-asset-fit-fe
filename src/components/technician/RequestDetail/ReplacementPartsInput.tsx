'use client'

import { useState, useEffect } from 'react'
import { Button, Form, Popconfirm, Select, InputNumber, Input } from 'antd'
import { PlusOutlined, DeleteOutlined } from '@ant-design/icons'
import { Component, ComponentType, ComponentStatus } from '@/types'
import { mockComponents } from '@/lib/mockData/components'

export interface ReplacementPart {
	id: string
	componentId: string // Thay ƒë·ªïi t·ª´ name sang componentId
	componentType: ComponentType
	componentName: string
	componentSpecs?: string
	quantity: number
	note?: string
}

interface Props {
	value?: ReplacementPart[]
	onChange?: (value: ReplacementPart[]) => void
	assetId?: string // Th√™m prop assetId ƒë·ªÉ l·ªçc components
}

export default function ReplacementPartsInput({ value = [], onChange, assetId }: Props) {
	const [parts, setParts] = useState<ReplacementPart[]>(value)
	const [availableComponents, setAvailableComponents] = useState<Component[]>([])

	// L·ªçc components theo assetId
	useEffect(() => {
		if (assetId) {
			const filtered = mockComponents.filter(
				(comp) => comp.computerAssetId === assetId && comp.status === ComponentStatus.INSTALLED
			)
			setAvailableComponents(filtered)
		} else {
			setAvailableComponents([])
		}
	}, [assetId])

	const triggerChange = (changedValue: ReplacementPart[]) => {
		onChange?.(changedValue)
	}

	const handleAddPart = () => {
		const newPart: ReplacementPart = {
			id: Date.now().toString(), // Simple unique ID
			componentId: '',
			componentType: ComponentType.OTHER,
			componentName: '',
			quantity: 1,
		}
		const newParts = [...parts, newPart]
		setParts(newParts)
		triggerChange(newParts)
	}

	const handlePartChange = (id: string, field: keyof ReplacementPart, fieldValue: any) => {
		const newParts = parts.map((part) => {
			if (part.id === id) {
				// N·∫øu thay ƒë·ªïi componentId, c·∫≠p nh·∫≠t th√¥ng tin component
				if (field === 'componentId') {
					const selectedComponent = availableComponents.find(comp => comp.id === fieldValue)
					if (selectedComponent) {
						return {
							...part,
							componentId: fieldValue,
							componentType: selectedComponent.componentType,
							componentName: selectedComponent.name,
							componentSpecs: selectedComponent.componentSpecs
						}
					}
				}
				return { ...part, [field]: fieldValue }
			}
			return part
		})
		setParts(newParts)
		triggerChange(newParts)
	}

	const handleRemovePart = (id: string) => {
		const newParts = parts.filter((part) => part.id !== id)
		setParts(newParts)
		triggerChange(newParts)
	}

	// Nh√≥m components theo lo·∫°i ƒë·ªÉ d·ªÖ ch·ªçn
	const groupedComponents = availableComponents.reduce((acc, comp) => {
		if (!acc[comp.componentType]) {
			acc[comp.componentType] = []
		}
		acc[comp.componentType].push(comp)
		return acc
	}, {} as Record<ComponentType, Component[]>)

	if (!assetId) {
		return (
			<div className="space-y-3">
				<h4 className="text-md font-semibold text-gray-800">Linh ki·ªán c·∫ßn thay th·∫ø</h4>
				<div className="p-4 bg-gray-50 border rounded-md text-center text-gray-500">
					<p>Kh√¥ng th·ªÉ x√°c ƒë·ªãnh thi·∫øt b·ªã. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin y√™u c·∫ßu.</p>
				</div>
			</div>
		)
	}

	return (
		<div className="space-y-3">
			<h4 className="text-md font-semibold text-gray-800">Linh ki·ªán c·∫ßn thay th·∫ø</h4>
			<div className="text-sm text-gray-600 mb-2">
				üîß T√¨m th·∫•y <strong>{availableComponents.length}</strong> linh ki·ªán c√≥ th·ªÉ thay th·∫ø cho thi·∫øt b·ªã n√†y
			</div>
			{availableComponents.length === 0 ? (
				<div className="p-4 bg-yellow-50 border border-yellow-200 rounded-md text-center text-yellow-700">
					<p>‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y linh ki·ªán n√†o cho thi·∫øt b·ªã n√†y.</p>
					<p className="text-sm mt-2">AssetId: <strong>{assetId}</strong></p>
				</div>
			) : (
				<>
					{parts.map((part, index) => {
						const selectedComponent = availableComponents.find(comp => comp.id === part.componentId)
						return (
							<div key={part.id} className="flex items-start gap-2 p-3 border rounded-md bg-gray-50">
								<div className="flex-grow space-y-3">
									<div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
										<Form.Item label={`Ch·ªçn linh ki·ªán`} className="mb-0">
											<Select
												value={part.componentId || undefined}
												placeholder="Ch·ªçn linh ki·ªán c·∫ßn thay th·∫ø"
												onChange={(value) => handlePartChange(part.id, 'componentId', value)}
												className="w-full"
												showSearch
												optionFilterProp="label"
												filterOption={(input, option) =>
													option?.label?.toString().toLowerCase().includes(input.toLowerCase()) || false
												}
											>
												{Object.entries(groupedComponents).map(([type, components]) => (
													<Select.OptGroup key={type} label={type}>
														{components.map((comp) => (
															<Select.Option key={comp.id} value={comp.id}>
																<div className="flex flex-col">
																	<span className="font-medium">{comp.name}</span>
																	{/* {comp.componentSpecs && (
																		<span className="text-xs text-gray-500">{comp.componentSpecs}</span>
																	)} */}
																</div>
															</Select.Option>
														))}
													</Select.OptGroup>
												))}
											</Select>
										</Form.Item>
										<Form.Item label={`S·ªë l∆∞·ª£ng `} className="mb-0">
											<InputNumber
												value={part.quantity}
												min={1}
												max={10}
												onChange={(value) => handlePartChange(part.id, 'quantity', value || 1)}
												className="w-full"
											/>
										</Form.Item>
									</div>
									
									{selectedComponent && (
										<div className="p-2 bg-blue-50 border border-blue-200 rounded text-sm">
											<p className="text-blue-800 font-medium">Th√¥ng tin linh ki·ªán ƒë√£ ch·ªçn:</p>
											<div className="text-blue-700 mt-1 space-y-1">
												<div><strong>Lo·∫°i:</strong> {selectedComponent.componentType}</div>
												<div><strong>Model:</strong> {selectedComponent.name}</div>
												{selectedComponent.componentSpecs && (
													<div><strong>Th√¥ng s·ªë:</strong> {selectedComponent.componentSpecs}</div>
												)}
												{selectedComponent.serialNumber && (
													<div><strong>Serial:</strong> {selectedComponent.serialNumber}</div>
												)}
											</div>
										</div>
									)}

									<Form.Item label={`Ghi ch√∫ th√™m`} className="mb-0">
										<Input
											value={part.note}
											onChange={(e) => handlePartChange(part.id, 'note', e.target.value)}
											placeholder="Ghi ch√∫ v·ªÅ l√Ω do thay th·∫ø, y√™u c·∫ßu ƒë·∫∑c bi·ªát..."
										/>
									</Form.Item>
								</div>
								<Popconfirm
									title="X√°c nh·∫≠n x√≥a linh ki·ªán n√†y?"
									description="Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c."
									onConfirm={() => handleRemovePart(part.id)}
									okText="X√≥a"
									cancelText="H·ªßy"
								>
									<Button icon={<DeleteOutlined />} danger />
								</Popconfirm>
							</div>
						)
					})}
					<Button 
						type="dashed" 
						onClick={handleAddPart} 
						block 
						icon={<PlusOutlined />}
						disabled={parts.length >= availableComponents.length}
					>
						Th√™m linh ki·ªán {parts.length >= availableComponents.length ? '(ƒê√£ ch·ªçn h·∫øt)' : ''}
					</Button>
					
					{parts.length > 0 && (
						<div className="p-3 bg-green-50 border border-green-200 rounded text-sm text-green-700">
							<p className="font-medium">üí° L∆∞u √Ω:</p>
							<ul className="mt-1 space-y-1 list-disc list-inside">
								<li>H√£y ƒë·∫£m b·∫£o ch·ªçn ƒë√∫ng linh ki·ªán c·∫ßn thay th·∫ø</li>
								<li>S·ªë l∆∞·ª£ng thay th·∫ø th∆∞·ªùng l√† 1, tr·ª´ khi c·∫ßn thay th·∫ø nhi·ªÅu module c√πng lo·∫°i</li>
								<li>Ghi r√µ l√Ω do thay th·∫ø ƒë·ªÉ b·ªô ph·∫≠n mua s·∫Øm hi·ªÉu r√µ y√™u c·∫ßu</li>
							</ul>
						</div>
					)}
				</>
			)}
		</div>
	)
}